# D:\Projects\ru-content-bot\bot\services\generator.py
from __future__ import annotations
import json
import requests
from bot.utils.config import Config


def _template_variants(prompt: str, profile: dict | None):
    """–ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã A/B."""
    style = (profile or {}).get("style") or "ru-playful"
    audience = (profile or {}).get("audience") or "ru"
    a = (f"üî• {prompt}\n\n–ö–æ—Ä–æ—Ç–∫–∏–π –ª–∏–¥ + –±—É–ª–ª–µ—Ç—ã.\n"
         f"‚Ä¢ –§–∞–∫—Ç/–≤—ã–≥–æ–¥–∞ #1\n‚Ä¢ –§–∞–∫—Ç/–≤—ã–≥–æ–¥–∞ #2\n‚Ä¢ –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é.\n"
         f"–¢–æ–Ω: {style}, –∞—É–¥–∏—Ç–æ—Ä–∏—è: {audience}.")
    b = (f"üß™ {prompt}\n\n–•—É–∫-–≤–æ–ø—Ä–æ—Å + –º–∏–Ω–∏-–∏—Å—Ç–æ—Ä–∏—è (1 –∞–±–∑–∞—Ü).\n"
         f"–í –∫–æ–Ω—Ü–µ ‚Äî —è–≤–Ω—ã–π CTA –∏ —ç–º–æ–¥–∑–∏.\n–¢–æ–Ω: {style}, –∞—É–¥–∏—Ç–æ—Ä–∏—è: {audience}.")
    return {"A": {"text": a, "pred": 0.52}, "B": {"text": b, "pred": 0.56}}


def _bad(s: str) -> bool:
    """
    –§–∏–ª—å—Ç—Ä ¬´–±–∏—Ç—ã—Ö¬ª –æ—Ç–≤–µ—Ç–æ–≤: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ, —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É–∂–µ–±–Ω–æ–µ ¬´undefined/json¬ª,
    –∏–ª–∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π JSON.
    """
    x = (s or "").strip()
    xl = x.lower()
    return (
        len(x) < 10
        or "undefined" in xl
        or "json" in xl
        or xl.startswith("{")
        or xl.startswith("[")
    )


def generate_variants(prompt: str, profile: dict | None, *, force_template: bool = False) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"A": {"text": "...", "pred": ...}, "B": {...}}.
    - –ï—Å–ª–∏ n8n –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–∏—à–ª–æ ¬´–±–∏—Ç–æ–µ¬ª —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã.
    """
    if force_template:
        return _template_variants(prompt, profile)

    base = (Config.N8N_WEBHOOK_BASE or "").rstrip("/")
    if base:
        try:
            r = requests.post(
                f"{base}/generate_text",
                json={"prompt": prompt, "profile": profile or {}},
                timeout=40,
            )
            r.raise_for_status()
            data = r.json()

            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ n8n:
            if "variants" in data:
                v = data["variants"]
                A_text = (v.get("A", {}).get("text", "") or "").strip()
                B_text = (v.get("B", {}).get("text", "") or "").strip()
                predA = float(v.get("A", {}).get("pred", 0.55))
                predB = float(v.get("B", {}).get("pred", 0.57))
            else:
                A_text = (data.get("A", "") or "").strip()
                B_text = (data.get("B", "") or "").strip()
                predA = float(data.get("predA", 0.55))
                predB = float(data.get("predB", 0.57))

            # ‚ùó –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç—ã –ø—É—Å—Ç—ã–µ/–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ ‚Äî –≤–µ—Ä–Ω—ë–º —à–∞–±–ª–æ–Ω—ã
            if _bad(A_text) or _bad(B_text):
                return _template_variants(prompt, profile)

            return {
                "A": {"text": A_text, "pred": predA},
                "B": {"text": B_text, "pred": predB},
            }
        except Exception:
            # –õ—é–±–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏/—Ñ–æ—Ä–º–∞—Ç–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã
            return _template_variants(prompt, profile)

    # –ï—Å–ª–∏ N8N_WEBHOOK_BASE –Ω–µ –∑–∞–¥–∞–Ω
    return _template_variants(prompt, profile)
