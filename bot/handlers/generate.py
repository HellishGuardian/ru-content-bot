# bot/handlers/generate.py
from aiogram import Router, types, F
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bot.services.abtest import (
    create_ab_test, get_ab_test, select_variant,
    set_message_id, mark_published, delete_ab_test
)
from bot.services.publisher import publish_text
from bot.utils.config import Config

router = Router()

def kb_variant(ab_id: str, variant: str, selected: str | None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º."""
    if selected == variant:
        choose_btn = InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞–Ω–æ", callback_data=f"noop:{variant}:{ab_id}")
    else:
        choose_btn = InlineKeyboardButton(text=f"‚úÖ –í—ã–±—Ä–∞—Ç—å {variant}", callback_data=f"choose:{variant}:{ab_id}")

    return InlineKeyboardMarkup(inline_keyboard=[
        [choose_btn, InlineKeyboardButton(text=f"üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å {variant}", callback_data=f"pub:{variant}:{ab_id}")],
        [InlineKeyboardButton(text=f"üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç {variant}", callback_data=f"show:{variant}:{ab_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data=f"del:{ab_id}")]
    ])

@router.message(Command("generate"))
async def generate_cmd(msg: types.Message, command: CommandObject):
    topic = (command.args or "").strip()
    if not topic:
        await msg.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "<code>/generate —Ç–µ–º–∞/–∏–¥–µ—è –ø–æ—Å—Ç–∞</code>\n\n"
            "–ù–∞–ø—Ä.: <code>/generate —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –Ω–∞–±–æ—Ä–∞ –∫–∏—Å—Ç–µ–π Ozon –¥–æ 1500‚ÇΩ</code>"
        )
        return
    if not Config.N8N_WEBHOOK_BASE:
        await msg.answer("‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ (—à–∞–±–ª–æ–Ω—ã), —Ç–∞–∫ –∫–∞–∫ N8N_WEBHOOK_BASE –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

    ab_id = create_ab_test(msg.from_user.id, topic)
    ab = get_ab_test(msg.from_user.id, ab_id)
    A = ab["variants"]["A"]["text"]
    B = ab["variants"]["B"]["text"]

    mA = await msg.answer(
        f"<b>–í–∞—Ä–∏–∞–Ω—Ç A</b> (–ø—Ä–µ–¥–∏–∫—Ç ‚âà {ab['variants']['A']['pred']:.2f})\n\n{A}",
        reply_markup=kb_variant(ab_id, "A", selected=None)
    )
    set_message_id(msg.from_user.id, ab_id, "A", mA.message_id)

    mB = await msg.answer(
        f"<b>–í–∞—Ä–∏–∞–Ω—Ç B</b> (–ø—Ä–µ–¥–∏–∫—Ç ‚âà {ab['variants']['B']['pred']:.2f})\n\n{B}",
        reply_markup=kb_variant(ab_id, "B", selected=None)
    )
    set_message_id(msg.from_user.id, ab_id, "B", mB.message_id)

    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –í—ã–±—Ä–∞—Ç—å A/B¬ª, –∑–∞—Ç–µ–º ¬´üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å¬ª.")

@router.callback_query(F.data.startswith("noop:"))
async def on_noop(call: types.CallbackQuery):
    await call.answer("–≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω.", show_alert=False)

@router.callback_query(F.data.startswith("choose:"))
async def on_choose(call: types.CallbackQuery):
    _, variant, ab_id = call.data.split(":")
    user_id = call.from_user.id
    select_variant(user_id, ab_id, variant)
    ab = get_ab_test(user_id, ab_id) or {}
    messages = (ab.get("messages") or {})
    sel = ab.get("selected")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ –æ–±–æ–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å –≤—ã–±–æ—Ä
    bot = call.message.bot
    try:
        if messages.get("A"):
            await bot.edit_message_reply_markup(
                chat_id=user_id, message_id=messages["A"],
                reply_markup=kb_variant(ab_id, "A", selected=sel)
            )
        if messages.get("B"):
            await bot.edit_message_reply_markup(
                chat_id=user_id, message_id=messages["B"],
                reply_markup=kb_variant(ab_id, "B", selected=sel)
            )
    except Exception:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã/–∏–∑–º–µ–Ω–µ–Ω—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass

    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç <b>{variant}</b>. –ú–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞–∂–∞—Ç—å ¬´üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å {variant}¬ª –∏–ª–∏ ¬´üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç {variant}¬ª.")
    await call.answer("–í—ã–±—Ä–∞–Ω–æ!")

@router.callback_query(F.data.startswith("show:"))
async def on_show(call: types.CallbackQuery):
    _, variant, ab_id = call.data.split(":")
    ab = get_ab_test(call.from_user.id, ab_id)
    if not ab:
        await call.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    text = ab["variants"][variant]["text"]
    await call.message.answer(f"–¢–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant}:\n\n{text}")
    await call.answer()

@router.callback_query(F.data.startswith("pub:"))
async def on_publish(call: types.CallbackQuery):
    _, variant, ab_id = call.data.split(":")
    ab = get_ab_test(call.from_user.id, ab_id)
    if not ab:
        await call.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    text = ab["variants"][variant]["text"]
    ok, info = publish_text(call.from_user.id, text)
    if ok:
        mark_published(call.from_user.id, ab_id, variant)
        await call.message.answer(f"üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç {variant}. {info}")
    else:
        await call.message.answer(f"‚ö†Ô∏è {info}\n\n–¢–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant}:\n{text}")
    await call.answer("–ì–æ—Ç–æ–≤–æ")

@router.callback_query(F.data.startswith("del:"))
async def on_delete(call: types.CallbackQuery):
    _, ab_id = call.data.split(":")
    delete_ab_test(call.from_user.id, ab_id)
    await call.message.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª—ë–Ω.")
    await call.answer("–£–¥–∞–ª–µ–Ω–æ")
