from aiogram import Router, types, F
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bot.services.abtest import create_ab_test, get_ab_test, select_variant
from bot.services.storage import get_user
from bot.services.publisher import publish_text

router = Router()

def _kb_choices(ab_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å A", callback_data=f"choose:A:{ab_id}"),
         InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å B", callback_data=f"choose:B:{ab_id}")],
        [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å A", callback_data=f"pub:A:{ab_id}"),
         InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å B", callback_data=f"pub:B:{ab_id}")]
    ])

@router.message(Command("generate"))
async def generate_cmd(msg: types.Message, command: CommandObject):
    topic = (command.args or "").strip()
    if not topic:
        await msg.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "<code>/generate —Ç–µ–º–∞/–∏–¥–µ—è –ø–æ—Å—Ç–∞</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/generate —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –Ω–∞–±–æ—Ä–∞ –∫–∏—Å—Ç–µ–π –¥–ª—è –º–∞–∫–∏—è–∂–∞</code>"
        )
        return

    ab_id = create_ab_test(msg.from_user.id, topic)
    ab = get_ab_test(msg.from_user.id, ab_id)
    A = ab["variants"]["A"]["text"]
    B = ab["variants"]["B"]["text"]

    await msg.answer(
        f"<b>A</b> (pred‚âà{ab['variants']['A']['pred']:.2f}):\n{A}",
        reply_markup=_kb_choices(ab_id)
    )
    await msg.answer(
        f"<b>B</b> (pred‚âà{ab['variants']['B']['pred']:.2f}):\n{B}"
    )

@router.callback_query(F.data.startswith("choose:"))
async def on_choose(call: types.CallbackQuery):
    _, variant, ab_id = call.data.split(":")
    select_variant(call.from_user.id, ab_id, variant)
    await call.message.answer(f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç <b>{variant}</b> –¥–ª—è A/B #{ab_id}. –ú–æ–∂–Ω–æ –∂–∞—Ç—å ¬´–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å {variant}¬ª.")
    await call.answer("–í—ã–±—Ä–∞–Ω–æ!")

@router.callback_query(F.data.startswith("pub:"))
async def on_publish(call: types.CallbackQuery):
    _, variant, ab_id = call.data.split(":")
    ab = get_ab_test(call.from_user.id, ab_id)
    if not ab:
        await call.answer("–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    text = ab["variants"][variant]["text"]
    ok, info = publish_text(call.from_user.id, text)
    if ok:
        await call.message.answer(f"üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç {variant} —á–µ—Ä–µ–∑ n8n. {info}")
    else:
        # –ï—Å–ª–∏ n8n –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî —Ö–æ—Ç—è –±—ã –≤–µ—Ä–Ω—ë–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.message.answer(f"‚ö†Ô∏è {info}\n\n–¢–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant}:\n{text}")
    await call.answer("–ì–æ—Ç–æ–≤–æ")
